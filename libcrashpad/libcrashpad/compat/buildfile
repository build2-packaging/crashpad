import intf_libs += mini_chromium%lib{mini_chromium}

include ../build/
include ../util/
intf_libs += ../build/lib{build}
impl_libs += ../util/lib{no_cfi_icall}

linux_headers =  linux/signal \
                 linux/sys/mman \
                 linux/sys/ptrace \
                 linux/sys/user \
                 non_mac/mach/mach \
                 non_win/dbghelp \
                 non_win/minwinbase \
                 non_win/timezoneapi \
                 non_win/verrsrc \
                 non_win/windows \
                 non_win/winnt

linux_source =   linux/sys/mman_memfd_create

mac_headers =    mac/Availability \
                 mac/AvailabilityVersions \
                 mac/kern/exc_resource \
                 mac/mach-o/loader \
                 mac/mach/i386/thread_state \
                 mac/mach/mach \
                 mac/sys/resource \
                 non_win/dbghelp \
                 non_win/minwinbase \
                 non_win/timezoneapi \
                 non_win/verrsrc \
                 non_win/windows \
                 non_win/winnt

win_headers =    win/getopt \
                 win/strings \
                 win/sys/types \
                 win/sys/time \
                 win/time \
                 win/winbase \
                 win/winnt \
                 win/winternl \
                 non_mac/mach/mach

win_source =     win/strings \
                 win/time

include ../third_party/getopt/

lib{compat}: {hxx}{$linux_headers} {cxx}{$linux_source}: include = ($cxx.target.class == 'linux')
lib{compat}: {hxx}{$mac_headers} {cxx}{$mac_source}: include = ($cxx.target.class == 'macos')
lib{compat}: {hxx}{$win_headers} {cxx}{$win_source}: include = ($cxx.target.class == 'windows')
lib{compat}: ../third_party/getopt/lib{getopt}: include = ($cxx.target.class == 'windows')
lib{compat}: $impl_libs $intf_libs

switch $cxx.target.class
{
  case 'linux'
  {
    cxx.libs += -ldl
    include_dirs += "-I$src_root"/libcrashpad/compat/linux "-I$src_root"/libcrashpad/compat/non_win
  }
  case 'macos'
  {
    include_dirs += "-I$src_root"/libcrashpad/compat/mac "-I$src_root"/libcrashpad/compat/non_win
  }
  case 'windows'
  {
    include_dirs += "-I$src_root"/libcrashpad/compat/win
  }
}

# Build options.
#
cxx.poptions =+ "-I$src_root"/libcrashpad $include_dirs

# Export options.
#
lib{compat}:
{
  cxx.export.poptions = "-I$src_root"/libcrashpad $include_dirs
  cxx.export.libs = $intf_libs
}

switch $cxx.target.class
{
  case 'linux'
    lib{compat}: cxx.pkgconfig.include = include/crashpad include/crashpad/compat/non_win include/crashpad/compat/linux
  case 'macos'
    lib{compat}: cxx.pkgconfig.include = include/crashpad include/crashpad/compat/non_win include/crashpad/compat/mac
  case 'windows'
    lib{compat}: cxx.pkgconfig.include = include/crashpad include/crashpad/compat/win
}

# Install into the crashpad/ subdirectory of, say, /usr/include/
# recreating subdirectories.
{hxx ixx txx}{*}:
{
  install         = include/crashpad/compat/
  install.subdirs = true
}
